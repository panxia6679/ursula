---
- name: install neutron-data-network packages
  package: name={{ item }}
  with_items:
    - dnsmasq
    - dnsmasq-utils
    - ucarp
    - radvd
  register: result
  until: result|succeeded
  retries: 5

- name: install packages for l3ha
  package: name=keepalived
  when: neutron.l3ha.enabled|bool
  register: result
  until: result|succeeded
  retries: 5

- name: remove conntrackd
  package: name=conntrackd state=absent
  register: result
  until: result|succeeded
  retries: 5

- include: dnsmasq.yml

- include: igmp-router.yml
  when: ursula_os == 'ubuntu' and (
        neutron.plugin == 'ml2' and
        'vxlan' in neutron.tunnel_types
        and not neutron.l2_population )

- name: assert kernel supports vxlan
  command: modinfo -F version vxlan
  changed_when: false
  when: "'vxlan' in neutron.tunnel_types"

- name: assert iproute2 supports vxlan
  command: ip link add type vxlan help
  register: iproute_out
  changed_when: false
  failed_when: iproute_out.rc == 255
  when: "'vxlan' in neutron.tunnel_types"

- name: install neutron-data-network services (ubuntu)
  upstart_service:
    name: "{{ item.name }}"
    start_on: "{{ item.start_on|default(omit) }}"
    stop_on: "{{ item.stop_on|default(omit) }}"
    user: "{{ item.user }}"
    pidfile: "{{ item.pidfile|default(omit) }}"
    cmd: "{{ item.cmd }}"
    config_dirs: "{{ item.config_dirs }}"
    config_files: "{{ item.config_files|default(omit) }}"
    envs: "{{ item.envs }}"
  with_items:
    - "{{ neutron.services.neutron_dhcp_agent }}"
    - "{{ neutron.services.neutron_l3_agent }}"
    - "{{ neutron.services.neutron_metadata_agent }}"
  when: ursula_os == 'ubuntu'


- name: install neutron-data-network services (rhel)
  systemd_service:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    type: "{{ item.type }}"
    user: "{{ item.user }}"
    environments: "{{ item.environments }}"
    cmd: "{{ item.cmd }}"
    config_dirs: "{{ item.config_dirs }}"
    config_files: "{{ item.config_files }}"
    pidfile: "{{ item.pidfile|default(omit) }}"
    restart: "{{ item.restart }}"
    kill_mode: "{{ item.kill_mode }}"
  with_items:
    - "{{ neutron.services.neutron_dhcp_agent }}"
    - "{{ neutron.services.neutron_l3_agent }}"
    - "{{ neutron.services.neutron_metadata_agent }}"
  when: ursula_os == 'rhel'

- block:
  - include: lbaas-haproxy-cleanup.yml
    when: neutron.lbaas.f5.enabled|bool

  - include: lbaas-f5-cleanup.yml
    when: not neutron.lbaas.f5.enabled|bool

  - include: lbaas-f5.yml
    when: neutron.lbaas.f5.enabled|bool

  - include: lbaas-haproxy.yml
    when: not neutron.lbaas.f5.enabled | bool
  when: (neutron.lbaas.enabled == "smart" and groups['controller'][0] not in groups['compute']) or neutron.lbaas.enabled|bool

- block:
  - include: lbaas-f5-cleanup.yml
  - include: lbaas-haproxy-cleanup.yml
  when:  not neutron.lbaas.enabled|bool

- name: kill namespaced neutron processes on upgrade
  command: pkill -f {{ item }}
  failed_when: False
  when: code_has_changed | default('False') | bool and
        upgrade | default('False') | bool
  with_items:
    - neutron-keepalived-state-change
    - neutron-ns-metadata-proxy

- name: trigger restart on upgrades
  debug:
    msg: "Triggering service restart for upgrade"
  changed_when: True
  notify: restart neutron services
  when: code_has_changed | default('False') | bool and
        upgrade | default('False') | bool

- meta: flush_handlers

- name: start neutron-data-network services
  service:
    name: "{{ item.name }}"
    state: started
    enabled: True
  with_items:
    - "{{ neutron.services.neutron_l3_agent }}"
    - "{{ neutron.services.neutron_dhcp_agent }}"
    - "{{ neutron.services.neutron_metadata_agent }}"

- include: ipchanged.yml

- include: monitoring.yml
  tags:
    - monitoring
    - common
  when: monitoring.enabled|default('True')|bool
